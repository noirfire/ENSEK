{
	"info": {
		"_postman_id": "85e41ad5-8a8c-44f9-94dc-f2f5baf4adb1",
		"name": "ENSEK Test API Application",
		"description": "Purchase Application",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "44832191",
		"_collection_link": "https://philipreid-3099566.postman.co/workspace/Phil~e7c47cca-fa13-48de-a83f-89ca080a5f26/collection/44832191-85e41ad5-8a8c-44f9-94dc-f2f5baf4adb1?action=share&source=collection_link&creator=44832191"
	},
	"item": [
		{
			"name": "ENSEK",
			"item": [
				{
					"name": "login",
					"item": [
						{
							"name": "Positive tests",
							"item": [
								{
									"name": "post login - POS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Response Time Test\r",
													"pm.test(\"Response time is within an acceptable range\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"// Status Code Test\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// Save the token to an environment variable\r",
													"const responseData = pm.response.json();\r",
													"pm.environment.set(\"authToken\", responseData.access_token);\r",
													"console.log(\"Testing with token:\", pm.environment.get(\"authToken\"));\r",
													"\r",
													"// Confirm token is set\r",
													"pm.test(\"Authorization token is saved\", function () {\r",
													"    pm.expect(pm.environment.get(\"authToken\")).to.not.be.undefined;\r",
													"});\r",
													"\r",
													"// Required Fields Test\r",
													"pm.test(\"Response has the required fields - access_token and message\", function () {\r",
													"    pm.expect(responseData.access_token).to.exist;\r",
													"    pm.expect(responseData.message).to.exist;\r",
													"});\r",
													"\r",
													"// Message Validation\r",
													"pm.test(\"Message is a non-empty string\", function () {\r",
													"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
													"});\r",
													"\r",
													"// Message should be 'Success'\r",
													"pm.test(\"Message should be 'Success'\", function () {\r",
													"    pm.expect(responseData.message).to.equal(\"Success\");\r",
													"});\r",
													"\r",
													"// Access Token Validation\r",
													"pm.test(\"Access token is a non-empty string\", function () {\r",
													"    pm.expect(responseData.access_token).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
													"});\r",
													"\r",
													"// Validate JWT Structure\r",
													"pm.test(\"Access token follows JWT format\", function () {\r",
													"    pm.expect(responseData.access_token.split(\".\").length).to.equal(3);\r",
													"});\r",
													"\r",
													"// Verify JWT Signing Algorithm\r",
													"pm.test(\"Access token uses expected signing algorithm\", function () {\r",
													"    const tokenHeader = JSON.parse(atob(responseData.access_token.split(\".\")[0]));\r",
													"    pm.expect(tokenHeader.alg).to.equal(\"HS256\");\r",
													"});\r",
													"\r",
													"// Check Token Expiration\r",
													"pm.test(\"Access token is not expired\", function () {\r",
													"    const tokenPayload = JSON.parse(atob(responseData.access_token.split(\".\")[1]));\r",
													"    const currentTime = Math.floor(Date.now() / 1000);\r",
													"    pm.expect(tokenPayload.exp).to.be.greaterThan(currentTime);\r",
													"});\r",
													"\r",
													"// Check for Expected Fields Only\r",
													"pm.test(\"Response contains only expected fields\", function () {\r",
													"    const expectedKeys = [\"access_token\", \"message\"];\r",
													"    pm.expect(Object.keys(responseData)).to.have.members(expectedKeys);\r",
													"});\r",
													"\r",
													"// Access Token Is Expired\r",
													"pm.test(\"Access token should be expired\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    const tokenPayload = JSON.parse(atob(responseData.access_token.split(\".\")[1]));\r",
													"    const currentTime = Math.floor(Date.now() / 1000 + 2000);\r",
													"\r",
													"    console.log(\"Token Expiration Time:\", tokenPayload.exp);\r",
													"    console.log(\"Current Time:\", currentTime);\r",
													"\r",
													"    if (tokenPayload.exp < currentTime) {\r",
													"        pm.expect(tokenPayload.exp).to.be.lessThan(currentTime);\r",
													"    } else {\r",
													"        console.log(\"Token is still valid, skipping expiration test.\");\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": ""
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"testing\",\n  \"username\": \"test\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/ENSEK/login",
										"description": "Use to obtain an Bearer access token."
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"password\": \"<string>\",\n  \"username\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/ENSEK/login"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Bad Request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"password\": \"<string>\",\n  \"username\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/ENSEK/login"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"password\": \"<string>\",\n  \"username\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/ENSEK/login"
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Negitive tests",
							"item": [
								{
									"name": "post login - NEG",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"// Response Time Exceeds Limit",
													"pm.test(\"Response time exceeds acceptable range\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.above(200);",
													"});",
													"",
													"// Status Code Is Not 200",
													"pm.test(\"Status code is not 200\", function () {",
													"    pm.expect(pm.response.code).to.not.equal(200);",
													"});",
													"",
													"// Authorization Token Is Not Saved",
													"pm.test(\"Authorization token is not saved\", function () {",
													"    pm.expect(pm.environment.get(\"authToken\")).to.be.undefined;",
													"});",
													"",
													"// Missing Required Fields",
													"pm.test(\"Response is missing required fields - access_token or message\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData).to.not.have.property(\"access_token\");",
													"    pm.expect(responseData).to.not.have.property(\"message\");",
													"});",
													"",
													"// Message Is Empty or Not a String",
													"pm.test(\"Message is either empty or not a string\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData.message).to.not.be.a('string').or.to.have.lengthOf(0);",
													"});",
													"",
													"// Message Is Not 'Success'",
													"pm.test(\"Message is not 'Success'\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData.message).to.not.equal(\"Success\");",
													"});",
													"",
													"// Access Token Is Missing or Empty",
													"pm.test(\"Access token is missing or empty\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData.access_token).to.not.be.a('string').or.to.have.lengthOf(0);",
													"});",
													"",
													"",
													"// ❌ Response Contains Unexpected Fields",
													"pm.test(\"Response contains unexpected fields\", function () {",
													"    const responseData = pm.response.json();",
													"    const expectedKeys = [\"access_token\", \"message\"];",
													"    pm.expect(Object.keys(responseData)).to.not.have.members(expectedKeys);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": ""
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"te2121\",\n  \"username\": \"test\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/ENSEK/login",
										"description": "Use to obtain an Bearer access token."
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"password\": \"<string>\",\n  \"username\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/ENSEK/login"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Bad Request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"password\": \"<string>\",\n  \"username\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/ENSEK/login"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"password\": \"<string>\",\n  \"username\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/ENSEK/login"
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "reset",
					"item": [
						{
							"name": "Positive tests",
							"item": [
								{
									"name": "post reset - POS",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json();\r",
													"pm.environment.set(\"authToken\", responseData.access_token);\r",
													"console.log(\"Testing with token:\", pm.environment.get(\"authToken\"));\r",
													"\r",
													"\r",
													"// Test that status code is 200 (Success)\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// Test that response is a valid JSON\r",
													"pm.test(\"Response body is a valid JSON\", function () {\r",
													"    pm.expect(() => JSON.parse(pm.response.text())).to.not.throw();\r",
													"});\r",
													"\r",
													"\r",
													"// Test that response contains expected message\r",
													"pm.test(\"Response message should be 'Success'\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData.message).to.equal(\"Success\", \"Message should be 'Success'\");\r",
													"});\r",
													"\r",
													"// Test that headers contain expected values\r",
													"pm.test(\"Content-Type should be JSON\", function () {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{authToken}}"
											}
										},
										"method": "POST",
										"header": [],
										"url": "{{baseUrl}}/ENSEK/reset",
										"description": "Use to reset the test data back to its initial state"
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": "{{baseUrl}}/ENSEK/reset"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": "{{baseUrl}}/ENSEK/reset"
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Negitive Tests",
							"item": [
								{
									"name": "post reset - NEG",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Expired JWT Token Setup\r",
													"const expiredToken = \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2NTAwMDAwMDB9.XYZ\"; \r",
													"pm.environment.set(\"authToken\", expiredToken);\r",
													"\r",
													"console.log(\"Testing with token:\", pm.environment.get(\"authToken\"));\r",
													"\r",
													"// Unauthorized request should return 401\r",
													"pm.test(\"Unauthorized request should return 401\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(401);\r",
													"});\r",
													"\r",
													"// Unauthorized response message should be correct\r",
													"pm.test(\"Unauthorized response message should be 'Unauthorized'\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData.message).to.equal(\"Unauthorized\");\r",
													"});\r",
													"\r",
													"// Empty request body should not be accepted\r",
													"pm.test(\"Empty request body should result in failure\", function () {\r",
													"    pm.expect(pm.response.code).to.not.equal(200);\r",
													"});\r",
													"\r",
													"// Ensure missing Accept header leads to failure\r",
													"pm.test(\"Missing Accept header should fail request\", function () {\r",
													"    pm.expect([401, 415]).to.include(pm.response.code);\r",
													"});\r",
													"\r",
													"// Malformed Access Token Test\r",
													"pm.test(\"Malformed access token should fail\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(401);\r",
													"});\r",
													"\r",
													"// Expired Token Should Be Unauthorized\r",
													"pm.test(\"Expired token should result in unauthorized response\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData.message).to.equal(\"Unauthorized\");\r",
													"});\r",
													"\r",
													"// Token signed with unexpected algorithm should fail\r",
													"pm.test(\"Token signed with incorrect algorithm should fail\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData.message).to.equal(\"Unauthorized\");\r",
													"});\r",
													"\r",
													"// Tampered token should fail authentication\r",
													"pm.test(\"Tampered token should result in failure\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(401);\r",
													"});\r",
													"\r",
													"// Token from different user role should be unauthorized\r",
													"pm.test(\"Token with incorrect user role should be rejected\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData.message).to.equal(\"Unauthorized\");\r",
													"});\r",
													"\r",
													"// Missing Bearer prefix should fail authentication\r",
													"pm.test(\"Token without Bearer prefix should fail\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(401);\r",
													"});\r",
													"\r",
													"// Token Used After Logout Should Be Unauthorized\r",
													"pm.test(\"Token used post logout should be unauthorized\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(401);\r",
													"});\r",
													"\r",
													"// Token sent via query parameter should be rejected\r",
													"pm.test(\"Sending token in query parameter should fail\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(401);\r",
													"});\r",
													"\r",
													"// Rate-limited authentication attempts should trigger restrictions\r",
													"pm.test(\"Multiple failed login attempts should trigger rate-limiting\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(429);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{authToken}}"
											}
										},
										"method": "POST",
										"header": [],
										"url": "{{baseUrl}}/ENSEK/reset",
										"description": "Use to reset the test data back to its initial state"
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": "{{baseUrl}}/ENSEK/reset"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": "{{baseUrl}}/ENSEK/reset"
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "energy",
					"item": [
						{
							"name": "get energy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"//Correct fields are present in the response for electric, gas, nuclear, and oil energies.",
											"pm.test(\"Response has required fields for electric, gas, nuclear, and oil energies\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('electric');",
											"    pm.expect(responseData.electric).to.have.property('energy_id');",
											"    pm.expect(responseData.electric).to.have.property('price_per_unit');",
											"    pm.expect(responseData.electric).to.have.property('quantity_of_units');",
											"    pm.expect(responseData.electric).to.have.property('unit_type');",
											"    pm.expect(responseData).to.have.property('gas');",
											"    pm.expect(responseData.gas).to.have.property('energy_id');",
											"    pm.expect(responseData.gas).to.have.property('price_per_unit');",
											"    pm.expect(responseData.gas).to.have.property('quantity_of_units');",
											"    pm.expect(responseData.gas).to.have.property('unit_type');",
											"    pm.expect(responseData).to.have.property('nuclear');",
											"    pm.expect(responseData.nuclear).to.have.property('energy_id');",
											"    pm.expect(responseData.nuclear).to.have.property('price_per_unit');",
											"    pm.expect(responseData.nuclear).to.have.property('quantity_of_units');",
											"    pm.expect(responseData.nuclear).to.have.property('unit_type');",
											"    pm.expect(responseData).to.have.property('oil');",
											"    pm.expect(responseData.oil).to.have.property('energy_id');",
											"    pm.expect(responseData.oil).to.have.property('price_per_unit');",
											"    pm.expect(responseData.oil).to.have.property('quantity_of_units');",
											"    pm.expect(responseData.oil).to.have.property('unit_type');",
											"});",
											"",
											"//Price per unit is a non-negative",
											"pm.test(\"Price per unit is a non-negative number for electric energy\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.electric.price_per_unit).to.be.a('number');",
											"    pm.expect(responseData.electric.price_per_unit).to.be.at.least(0, \"Price per unit should be non-negative\");",
											"});",
											"",
											"//Price per unit is a non-negative",
											"pm.test(\"Price per unit is a non-negative number for gas energy\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.gas.price_per_unit).to.be.a('number');",
											"    pm.expect(responseData.gas.price_per_unit).to.be.at.least(0, \"Price per unit should be non-negative\");",
											"});",
											"",
											"//Price per unit is a non-negative",
											"pm.test(\"Price per unit is a non-negative number for nuclear energy\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.nuclear.price_per_unit).to.be.a('number');",
											"    pm.expect(responseData.nuclear.price_per_unit).to.be.at.least(0, \"Price per unit should be non-negative\");",
											"});",
											"",
											"//Price per unit is a non-negative",
											"pm.test(\"Price per unit is a non-negative number for oil energy\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.oil.price_per_unit).to.be.a('number');",
											"    pm.expect(responseData.oil.price_per_unit).to.be.at.least(0, \"Price per unit should be non-negative\");",
											"});",
											"",
											"//Quantity of units is a non-negative number",
											"pm.test(\"Quantity of units is a non-negative number for electric, gas, nuclear, and oil energies\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"",
											"    const energies = [\"electric\", \"gas\", \"nuclear\", \"oil\"];",
											"    energies.forEach(energy => {",
											"        pm.expect(responseData[energy].quantity_of_units).to.be.a('number').and.to.be.at.least(0, \"Quantity of units should be a non-negative number\");",
											"    });",
											"});",
											"",
											"//Unit type is a non-empty string",
											"pm.test(\"Unit type is a non-empty string for electric energy\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.electric.unit_type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"//Unit type is a non-empty string",
											"pm.test(\"Unit type is a non-empty string for gas energy\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.gas.unit_type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"//Unit type is a non-empty string",
											"pm.test(\"Unit type is a non-empty string for nuclear energy\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.nuclear.unit_type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"//Unit type is a non-empty string",
											"pm.test(\"Unit type is a non-empty string for oil energy\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.oil.unit_type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"// Ensure API response contains valid energy data",
											"pm.test(\"API response should contain price_per_unit and unit_type for each fuel type\", function () {",
											"    Object.keys(responseData).forEach(energyType => {",
											"        pm.expect(responseData[energyType]).to.have.property(\"price_per_unit\");",
											"        pm.expect(responseData[energyType]).to.have.property(\"unit_type\");",
											"    });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseUrl}}/ENSEK/energy",
								"description": "Use to obtain details on energy types."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": "{{baseUrl}}/ENSEK/energy"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "buy",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "{quantity}",
									"item": [
										{
											"name": "Positive tests",
											"item": [
												{
													"name": "put buy - POS",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.globals.set(\"randomNumber\", Math.floor(Math.random() * 50) + 1);",
																	"",
																	"pm.test(\"Response status code is 200\", function () {",
																	"    pm.expect(pm.response.code).to.equal(200);",
																	"});",
																	"",
																	"pm.test(\"Response has the required Content-Type header set to application/json\", function () {",
																	"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
																	"});",
																	"",
																	"pm.test(\"Message is a non-empty string\", function () {",
																	"    const responseData = pm.response.json();",
																	"",
																	"    pm.expect(responseData).to.be.an('object');",
																	"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
																	"});",
																	"",
																	"pm.test(\"Verify the response message is as expected\", function () {",
																	"    const responseData = pm.response.json();",
																	"    pm.expect(responseData.message).to.exist;",
																	"});",
																	"",
																	"pm.test(\"Response time is less than 200ms\", function () {",
																	"    pm.expect(pm.response.responseTime).to.be.below(200);",
																	"});",
																	"",
																	"pm.test(\"Purchase request should return 200\", function () {",
																	"    pm.expect(pm.response.code).to.equal(200);",
																	"});",
																	"",
																	"pm.test(\"Response should be in JSON format\", function () {",
																	"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
																	"});",
																	"",
																	"pm.test(\"Energy ID should match the requested fuel type\", function () {",
																	"    const responseData = pm.response.json();",
																	"    pm.expect(responseData.energy_id).to.equal(pm.request.body.energy_id);",
																	"});",
																	""
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/ENSEK/buy/:id/:quantity",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"ENSEK",
																"buy",
																":id",
																":quantity"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "1",
																	"description": "(Required) Energy type identifier."
																},
																{
																	"key": "quantity",
																	"value": "1",
																	"description": "(Required) Quantity to purchase."
																}
															]
														},
														"description": "Use to purchase energy units."
													},
													"response": [
														{
															"name": "Success",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "<API Key>",
																		"description": "Added as a part of security scheme: apikey"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/ENSEK/buy/:id/:quantity",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"ENSEK",
																		"buy",
																		":id",
																		":quantity"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "quantity"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "text",
															"header": [],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Bad Request",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "<API Key>",
																		"description": "Added as a part of security scheme: apikey"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/ENSEK/buy/:id/:quantity",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"ENSEK",
																		"buy",
																		":id",
																		":quantity"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "quantity"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "text",
															"header": [],
															"cookie": [],
															"body": ""
														}
													]
												}
											]
										},
										{
											"name": "Negitive tests",
											"item": [
												{
													"name": "put buy - NEG",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"",
																	"pm.test('Response status code is 200', function () {",
																	"    pm.expect(pm.response.code).to.equal(200);",
																	"})",
																	"",
																	"pm.test('Response has the required Content-Type header with value application/json', function () {",
																	"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
																	"})",
																	"",
																	"pm.test('Validate that the response body is not empty', function () {",
																	"    const responseData = pm.response.json();",
																	"    pm.expect(responseData).to.not.be.empty;",
																	"})",
																	"",
																	"// Invalid Quantity (Zero or Negative)",
																	"pm.test(\"Invalid quantity should result in failure\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
																	"});",
																	"",
																	"// Nonexistent Energy ID",
																	"pm.test(\"Invalid energy ID should return error\", function () {",
																	"    const responseData = pm.response.json();",
																	"    pm.expect(pm.response.code).to.equal(404);",
																	"    pm.expect(responseData.message).to.include(\"Energy ID not found\");",
																	"});",
																	"",
																	"// Purchase Beyond Available Stock",
																	"pm.test(\"Buying more than available units should fail\", function () {",
																	"    pm.expect(pm.response.code).to.equal(400);",
																	"});",
																	"",
																	"// Missing Required Fields",
																	"pm.test(\"Request missing required fields should fail\", function () {",
																	"    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
																	"});",
																	"",
																	"// Unauthorized Purchase (No Auth Token)",
																	"pm.test(\"Unauthorized request should be rejected\", function () {",
																	"    pm.expect(pm.response.code).to.equal(401);",
																	"});",
																	"",
																	"// Invalid Data Type for Quantity",
																	"pm.test(\"Invalid data type in quantity should fail request\", function () {",
																	"    pm.expect(pm.response.code).to.equal(400);",
																	"});"
																],
																"type": "text/javascript",
																"packages": {}
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/ENSEK/buy/:id/:quantity",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"ENSEK",
																"buy",
																":id",
																":quantity"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "A",
																	"description": "(Required) Energy type identifier."
																},
																{
																	"key": "quantity",
																	"value": "A",
																	"description": "(Required) Quantity to purchase."
																}
															]
														},
														"description": "Use to purchase energy units."
													},
													"response": [
														{
															"name": "Success",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "<API Key>",
																		"description": "Added as a part of security scheme: apikey"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/ENSEK/buy/:id/:quantity",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"ENSEK",
																		"buy",
																		":id",
																		":quantity"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "quantity"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "text",
															"header": [],
															"cookie": [],
															"body": ""
														},
														{
															"name": "Bad Request",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "<API Key>",
																		"description": "Added as a part of security scheme: apikey"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/ENSEK/buy/:id/:quantity",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"ENSEK",
																		"buy",
																		":id",
																		":quantity"
																	],
																	"variable": [
																		{
																			"key": "id"
																		},
																		{
																			"key": "quantity"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "text",
															"header": [],
															"cookie": [],
															"body": ""
														}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "orders",
					"item": [
						{
							"name": "{orderId}",
							"item": [
								{
									"name": "get orders id's",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"pm.test(\"Response body has the required fields\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.fuel).to.exist;",
													"    pm.expect(responseData.id).to.exist;",
													"    pm.expect(responseData.quantity).to.exist;",
													"    pm.expect(responseData.time).to.exist;",
													"});",
													"",
													"",
													"pm.test(\"Quantity is a non-negative integer\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData).to.be.an('object');",
													"  pm.expect(responseData.quantity).to.exist.and.to.be.a('number');",
													"  pm.expect(responseData.quantity).to.satisfy((quantity) => {",
													"    return quantity >= 0 && Number.isInteger(quantity);",
													"  }, \"Quantity must be a non-negative integer\");",
													"});",
													"",
													"",
													"pm.test(\"Time is in a valid date format\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData).to.be.an('object');",
													"  pm.expect(responseData.time).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$/, \"Time should be in valid date format\");",
													"});",
													"",
													"",
													"pm.test(\"Content-Type header is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/ENSEK/orders/:orderId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"ENSEK",
												"orders",
												":orderId"
											],
											"variable": [
												{
													"key": "orderId",
													"value": "2cdd6f69-95df-437e-b4d3-e772472db8de",
													"description": "(Required) Order id"
												}
											]
										},
										"description": "Use to obtain details of a single previous order."
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/ENSEK/orders/:orderId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"ENSEK",
														"orders",
														":orderId"
													],
													"variable": [
														{
															"key": "orderId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "get orders",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const newOrders = pm.response.json();",
											"const existingOrderIDs = Object.keys(pm.environment.values).filter(key => key.startsWith(\"existing_order_\"));",
											"",
											"newOrders.forEach(order => {",
											"    pm.test(`Check if ${order.id} is a new order`, function () {",
											"        pm.expect(existingOrderIDs).to.not.include(`existing_order_${order.id}`);",
											"    });",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"// Ensure response contains data",
											"pm.test(\"Response should contain orders\", function () {",
											"    pm.expect(responseData.length).to.be.greaterThan(0);",
											"});",
											"",
											"// Extract order IDs",
											"const existingOrderIDsForTest = responseData.map(order => order.id)",
											"    .filter(id => id !== undefined && id !== null && id !== \"\");",
											"",
											"",
											"pm.test(\"Extracted order IDs should not be null\", function () {",
											"    pm.expect(existingOrderIDsForTest.length).to.be.greaterThan(0);",
											"});",
											"",
											"// Select two IDs for deletion",
											"const orderIDsToDelete = existingOrderIDsForTest.slice(0, 2);",
											"",
											"// Store in environment variables for later deletion",
											"pm.environment.set(\"delete_order_1\", orderIDsToDelete[0] || \"\");",
											"pm.environment.set(\"delete_order_2\", orderIDsToDelete[1] || \"\");",
											"",
											"console.log(\"Stored order IDs for deletion:\", orderIDsToDelete);",
											"",
											"",
											"// Ensure we have enough IDs to work with",
											"pm.test(\"Extracted order IDs should have at least 4 for selection\", function () {",
											"    pm.expect(existingOrderIDsForTest.length).to.be.greaterThan(3);",
											"});",
											"",
											"// Select two different IDs for modification (skip the first two deleted)",
											"const orderIDsToEdit = existingOrderIDsForTest.slice(3, 5); ",
											"",
											"// Store in environment variables for later use in PUT request",
											"pm.environment.set(\"edit_order_1\", orderIDsToEdit[0] || \"\");",
											"pm.environment.set(\"edit_order_2\", orderIDsToEdit[1] || \"\");",
											"",
											"console.log(\"Stored order IDs for editing:\", orderIDsToEdit);",
											"",
											"pm.test(\"Verify stored order IDs exist in environment variables\", function () {",
											"    const order1 = pm.environment.get(\"edit_order_1\");",
											"    const order2 = pm.environment.get(\"edit_order_2\");",
											"    ",
											"    pm.expect(order1).to.not.be.undefined.and.to.not.equal(\"\");",
											"    pm.expect(order2).to.not.be.undefined.and.to.not.equal(\"\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseUrl}}/ENSEK/orders",
								"description": "Use to obtain details of previous orders."
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": "{{baseUrl}}/ENSEK/orders"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "put orders",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has a valid JSON content type\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Response body is not empty\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.exist.and.to.not.be.empty;",
											"});",
											"",
											"",
											"pm.test(\"Verify that the response contains an error message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('error').that.is.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Check for specific error code or description in the response\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.have.property('errorCode');",
											"    pm.expect(responseData).to.have.property('errorDescription');",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"\",\n  \"quantity\": 0,\n  \"energy_id\": \"<integer>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ENSEK/orders/:orderId?quantity=2&energy_id=2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ENSEK",
										"orders",
										":orderId"
									],
									"query": [
										{
											"key": "quantity",
											"value": "2"
										},
										{
											"key": "energy_id",
											"value": "2"
										}
									],
									"variable": [
										{
											"key": "orderId",
											"value": "31fc32da-bccb-44ab-9352-4f43fc44ed4b",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"\",\n  \"quantity\": 0,\n  \"energy_id\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/ENSEK/orders/:orderId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"ENSEK",
												"orders",
												":orderId"
											],
											"variable": [
												{
													"key": "orderId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "delete orders",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Message is present in the response\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Response message is meaningful and provides useful information\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.message).to.exist.and.to.be.a('string', \"Message should be a string\");",
											"    pm.expect(responseData.message).to.not.be.empty;",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ENSEK/orders/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ENSEK",
										"orders",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "31fc32da-bccb-44ab-9352-4f43fc44ed4b",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/ENSEK/orders/:orderId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"ENSEK",
												"orders",
												":orderId"
											],
											"variable": [
												{
													"key": "orderId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Intergration Tests",
					"item": [
						{
							"name": "Login and reset",
							"item": [
								{
									"name": "post login - INT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Response Time Test\r",
													"pm.test(\"Response time is within an acceptable range\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
													"});\r",
													"\r",
													"// Status Code Test\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"// Save the token to an environment variable\r",
													"const responseData = pm.response.json();\r",
													"pm.environment.set(\"authToken\", responseData.access_token);\r",
													"console.log(\"Testing with token:\", pm.environment.get(\"authToken\"));\r",
													"\r",
													"// Confirm token is set\r",
													"pm.test(\"Authorization token is saved\", function () {\r",
													"    pm.expect(pm.environment.get(\"authToken\")).to.not.be.undefined;\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": ""
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"testing\",\n  \"username\": \"test\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/ENSEK/login",
										"description": "Use to obtain an Bearer access token."
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"password\": \"<string>\",\n  \"username\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/ENSEK/login"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Bad Request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"password\": \"<string>\",\n  \"username\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/ENSEK/login"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"password\": \"<string>\",\n  \"username\": \"<string>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/ENSEK/login"
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "post reset - INT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json();\r",
													"pm.environment.set(\"authToken\", responseData.access_token);\r",
													"console.log(\"Testing with token:\", pm.environment.get(\"authToken\"));\r",
													"\r",
													"\r",
													"// Test that status code is 200 (Success)\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"\r",
													"// Test that response contains expected message\r",
													"pm.test(\"Response message should be 'Success'\", function () {\r",
													"    const responseData = pm.response.json();\r",
													"    pm.expect(responseData.message).to.equal(\"Success\", \"Message should be 'Success'\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "{{authToken}}"
											}
										},
										"method": "POST",
										"header": [],
										"url": "{{baseUrl}}/ENSEK/reset",
										"description": "Use to reset the test data back to its initial state"
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": "{{baseUrl}}/ENSEK/reset"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": "{{baseUrl}}/ENSEK/reset"
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Confirm energy Data & Order Numbers",
							"item": [
								{
									"name": "get energy - INT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"const responseData = pm.response.json();",
													"",
													"// Store price and unit type in environment variables",
													"Object.keys(responseData).forEach(energyType => {",
													"    const energyInfo = responseData[energyType];",
													"",
													"    pm.environment.set(`price_${energyType}`, energyInfo.price_per_unit);",
													"    pm.environment.set(`unit_type_${energyType}`, energyInfo.unit_type);",
													"    // Store price, unit type, and quantity in environment variables",
													"    Object.keys(responseData).forEach(energyType => {",
													"        const energyInfo = responseData[energyType];",
													"",
													"        pm.environment.set(`price_${energyType}`, energyInfo.price_per_unit);",
													"        pm.environment.set(`unit_type_${energyType}`, energyInfo.unit_type);",
													"        pm.environment.set(`quantity_${energyType}`, energyInfo.quantity_of_units);",
													"    });",
													"",
													"    console.log(\"Stored energy data:\", responseData);",
													"",
													"    console.log(\"Stored price variables:\");",
													"    console.log(\"Gas price:\", pm.environment.get(\"price_gas\"));",
													"    console.log(\"Electric price:\", pm.environment.get(\"price_electric\"));",
													"    console.log(\"Oil price:\", pm.environment.get(\"price_oil\"));",
													"    console.log(\"Nuclear price:\", pm.environment.get(\"price_nuclear\"));",
													"",
													"    pm.test(\"Stored price per unit should not be undefined\", function () {",
													"        pm.expect(pm.environment.get(\"price_gas\")).to.not.be.undefined;",
													"        pm.expect(pm.environment.get(\"price_electric\")).to.not.be.undefined;",
													"        pm.expect(pm.environment.get(\"price_oil\")).to.not.be.undefined;",
													"        pm.expect(pm.environment.get(\"price_nuclear\")).to.not.be.undefined;",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/ENSEK/energy",
										"description": "Use to obtain details on energy types."
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": "{{baseUrl}}/ENSEK/energy"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "get orders - INT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"pm.test(\"Response has the required fields - fuel, id, quantity, and time\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData).to.be.an('array');",
													"    responseData.forEach(function(order) {",
													"        pm.expect(order).to.have.property('fuel');",
													"        pm.expect(order).to.have.property('id');",
													"        pm.expect(order).to.have.property('quantity');",
													"        pm.expect(order).to.have.property('time');",
													"    });",
													"});",
													"",
													"",
													"pm.test(\"Quantity is a non-negative integer\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    responseData.forEach(function(order) {",
													"        pm.expect(order.quantity).to.be.a('number');",
													"        pm.expect(order.quantity).to.be.at.least(0, \"Quantity should be a non-negative integer\");",
													"    });",
													"});",
													"",
													"",
													"pm.test(\"Time is in a valid date format\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    responseData.forEach(function(order) {",
													"        pm.expect(order.time).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$/);",
													"    });",
													"});",
													"",
													"",
													"pm.test(\"Content-Type header is application/json\", function () {",
													"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
													"});",
													"",
													"",
													"pm.test(\"Response should be valid JSON\", function () {",
													"    pm.expect(() => JSON.parse(pm.response.text())).to.not.throw();",
													"});",
													"",
													"pm.test(\"Response should contain an array of orders\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData).to.be.an(\"array\");",
													"    pm.expect(responseData.length).to.be.greaterThan(0);",
													"});",
													"",
													"pm.test(\"Each order should have required fields\", function () {",
													"    const responseData = pm.response.json();",
													"    responseData.forEach(order => {",
													"        pm.expect(order).to.have.property(\"fuel\");",
													"        pm.expect(order).to.have.property(\"id\");",
													"        pm.expect(order).to.have.property(\"quantity\");",
													"        pm.expect(order).to.have.property(\"time\");",
													"    });",
													"});",
													"",
													"pm.test(\"Fuel types should be valid\", function () {",
													"    const validFuels = [\"electric\", \"gas\", \"nuclear\", \"oil\"];",
													"    const responseData = pm.response.json();",
													"    responseData.forEach(order => {",
													"        pm.expect(validFuels).to.include(order.fuel);",
													"    });",
													"});",
													"",
													"pm.test(\"Quantity should be a positive number\", function () {",
													"    const responseData = pm.response.json();",
													"    responseData.forEach(order => {",
													"        pm.expect(order.quantity).to.be.a(\"number\").and.to.be.greaterThan(0);",
													"    });",
													"});",
													"",
													"pm.test(\"Order timestamps should be valid ISO format\", function () {",
													"    const responseData = pm.response.json();",
													"    responseData.forEach(order => {",
													"        pm.expect(new Date(order.time).toISOString()).to.exist;",
													"    });",
													"});",
													"",
													"const responseData = pm.response.json();",
													"",
													"// Store each order's ID in environment variables",
													"responseData.forEach(order => {",
													"    pm.environment.set(`existing_order_${order.id}`, order.id);",
													"});",
													"",
													"console.log(\"Stored existing order IDs:\", responseData.map(order => order.id));",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/ENSEK/orders",
										"description": "Use to obtain details of previous orders."
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": "{{baseUrl}}/ENSEK/orders"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Edit Via Buying",
							"item": [
								{
									"name": "put buy - INT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.globals.set(\"randomNumber\", Math.floor(Math.random() * 50) + 1);",
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"pm.test(\"Purchase request should return 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"pm.test(\"Energy ID should match the requested fuel type\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData.energy_id).to.equal(pm.request.body.energy_id);",
													"});",
													"",
													"const energyTypes = [",
													"    { \"energy_id\": 1, \"name\": \"Gas\" },",
													"    { \"energy_id\": 2, \"name\": \"Nuclear\" },",
													"    { \"energy_id\": 3, \"name\": \"Electric\" },",
													"    { \"energy_id\": 4, \"name\": \"Oil\" }",
													"];",
													"",
													"energyTypes.forEach((energy) => {",
													"    const purchaseUrl = `https://qacandidatetest.ensek.io/ENSEK/buy/${energy.energy_id}/1`;",
													"",
													"    pm.sendRequest({",
													"        url: purchaseUrl,",
													"        method: \"PUT\",",
													"        header: {",
													"            \"Accept\": \"application/json\"",
													"        }",
													"    }, function (err, res) {",
													"        if (err) {",
													"            console.error(err);",
													"            return;",
													"        }",
													"",
													"        const responseData = res.json();",
													"        console.log(`Response message for ${energy.name}:`, responseData.message);",
													"",
													"        const extractedData = responseData.message ? responseData.message.split(\" \") : [];",
													"        console.log(`Extracted Data Array for ${energy.name}:`, extractedData);",
													"",
													"        const knownUnits = [\"kWh\", \"m³\", \"MW\", \"Litres\"];",
													"        let purchasedUnitType = extractedData.find(word => knownUnits.includes(word)) || \"UNKNOWN\";",
													"        console.log(`Extracted Unit Type for ${energy.name}:`, purchasedUnitType);",
													"",
													"        const energyTypeMap = {",
													"            \"kWh\": \"electric\",",
													"            \"m³\": \"gas\",",
													"            \"MW\": \"nuclear\",",
													"            \"Litres\": \"oil\"",
													"        };",
													"        let purchasedEnergyType = energyTypeMap[purchasedUnitType] || \"UNKNOWN\";",
													"        console.log(`Mapped Energy Type for ${energy.name}:`, purchasedEnergyType);",
													"",
													"        pm.test(`Successful purchase of ${energy.name}`, function () {",
													"            pm.expect(res.code).to.equal(200);",
													"        });",
													"",
													"        pm.test(`Purchase message should confirm for ${energy.name}`, function () {",
													"            const responseMessage = res.json().message;",
													"            const storedQuantity = pm.environment.get(`quantity_${purchasedEnergyType}`);",
													"            console.log(\"stored is\", storedQuantity)",
													"            if (!storedQuantity || parseInt(storedQuantity, 10) === 0) {",
													"                pm.expect(responseMessage).to.include(\"There is no\");",
													"            } else {",
													"                pm.expect(responseMessage).to.include(\"You have purchased\");",
													"            }",
													"        });",
													"",
													"        const message = responseData.message || \"\";",
													"        const extractedData2 = message.split(\" \");",
													"",
													"        // Check if array has at least 9 items to prevent errors",
													"        const ninthItem = extractedData2.length >= 10 ? extractedData2[9] : \"ITEM_NOT_FOUND\";",
													"        console.log(\"9th item in extractedData:\", ninthItem);",
													"",
													"        purchasedUnitType = extractedData.find(word => knownUnits.includes(word)) || \"\";",
													"",
													"        // Ensure response contains a message",
													"        pm.test(\"API response should contain a purchase message\", function () {",
													"            pm.expect(responseData).to.have.property(\"message\");",
													"        });",
													"",
													"        purchasedEnergyType = energyTypeMap[purchasedUnitType] || null;  // Null if no match",
													"",
													"        if (!purchasedEnergyType) {",
													"            console.error(\"Error: Extracted unit type doesn't match known energy types!\");",
													"        } else {",
													"            const storedPrice = pm.environment.get(`price_${purchasedEnergyType}`);",
													"            const storedUnitType = pm.environment.get(`unit_type_${purchasedEnergyType}`);",
													"",
													"            pm.test(`Confirm correct price per unit for ${purchasedEnergyType}`, function () {",
													"                pm.expect(storedPrice).to.not.be.undefined;",
													"                pm.expect(ninthItem).to.not.equal(\"ITEM_NOT_FOUND\");",
													"                pm.expect(parseFloat(ninthItem)).to.equal(parseFloat(storedPrice));",
													"            });",
													"",
													"            pm.test(`Confirm correct unit type for ${purchasedEnergyType}`, function () {",
													"                pm.expect(storedUnitType).to.not.be.undefined;",
													"                pm.expect(purchasedUnitType).to.equal(storedUnitType);",
													"            });",
													"",
													"            console.log(`Running tests for: ${purchasedEnergyType}`);",
													"        }",
													"",
													"pm.test(`Purchased quantity should be correct for ${energy.name}`, function () {",
													"    const responseData = pm.response.json();",
													"    const message = responseData.message || \"\";",
													"",
													"    console.log(\"Raw API Message:\", message);",
													"",
													"    // Extract quantity from message text",
													"    const quantityMatch = message.match(/purchased (\\d+) /);",
													"    const purchasedQuantity = quantityMatch ? parseInt(quantityMatch[1], 10) : NaN;",
													"",
													"    console.log(\"Extracted Purchased Quantity:\", purchasedQuantity);",
													"",
													"    pm.expect(purchasedQuantity).to.be.a(\"number\").and.to.be.greaterThan(0);",
													"});",
													"",
													"    });",
													"",
													"",
													"",
													"    pm.test(`Remaining quantity should be updated for ${energy.name}`, function () {",
													"        const responseData = pm.response.json();",
													"        pm.expect(responseData.message).to.include(\"there are\");",
													"    });",
													"",
													"    pm.test(`Response format should be JSON for ${energy.name}`, function () {",
													"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"    });",
													"",
													"});",
													"",
													"pm.test(\"Each energy type should be successfully purchased\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    energyTypes.forEach((energy) => {",
													"        pm.expect(responseData[energy.name.toLowerCase()]).to.exist;",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/ENSEK/buy/:id/:quantity",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"ENSEK",
												"buy",
												":id",
												":quantity"
											],
											"variable": [
												{
													"key": "id",
													"value": "1",
													"description": "(Required) Energy type identifier."
												},
												{
													"key": "quantity",
													"value": "1",
													"description": "(Required) Quantity to purchase."
												}
											]
										},
										"description": "Use to purchase energy units."
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/ENSEK/buy/:id/:quantity",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"ENSEK",
														"buy",
														":id",
														":quantity"
													],
													"variable": [
														{
															"key": "id"
														},
														{
															"key": "quantity"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Bad Request",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/ENSEK/buy/:id/:quantity",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"ENSEK",
														"buy",
														":id",
														":quantity"
													],
													"variable": [
														{
															"key": "id"
														},
														{
															"key": "quantity"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Verify New Orders Exist",
							"item": [
								{
									"name": "get orders New Orders - INT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const newOrders = pm.response.json();",
													"const existingOrderIDs = Object.keys(pm.environment.values).filter(key => key.startsWith(\"existing_order_\"));",
													"",
													"newOrders.forEach(order => {",
													"    pm.test(`Check if ${order.id} is a new order`, function () {",
													"        pm.expect(existingOrderIDs).to.not.include(`existing_order_${order.id}`);",
													"    });",
													"});",
													"",
													"const responseData = pm.response.json();",
													"",
													"// Ensure response contains data",
													"pm.test(\"Response should contain orders\", function () {",
													"    pm.expect(responseData.length).to.be.greaterThan(0);",
													"});",
													"",
													"// Extract order IDs",
													"const existingOrderIDsForTest = responseData.map(order => order.id)",
													"    .filter(id => id !== undefined && id !== null && id !== \"\");",
													"",
													"",
													"pm.test(\"Extracted order IDs should not be null\", function () {",
													"    pm.expect(existingOrderIDsForTest.length).to.be.greaterThan(0);",
													"});",
													"",
													"// Select two IDs for deletion",
													"const orderIDsToDelete = existingOrderIDsForTest.slice(0, 2);",
													"",
													"// Store in environment variables for later deletion",
													"pm.environment.set(\"delete_order_1\", orderIDsToDelete[0] || \"\");",
													"pm.environment.set(\"delete_order_2\", orderIDsToDelete[1] || \"\");",
													"",
													"console.log(\"Stored order IDs for deletion:\", orderIDsToDelete);",
													"",
													"",
													"// Ensure we have enough IDs to work with",
													"pm.test(\"Extracted order IDs should have at least 4 for selection\", function () {",
													"    pm.expect(existingOrderIDsForTest.length).to.be.greaterThan(3);",
													"});",
													"",
													"// Select two different IDs for modification (skip the first two deleted)",
													"const orderIDsToEdit = existingOrderIDsForTest.slice(3, 5); ",
													"",
													"// Store in environment variables for later use in PUT request",
													"pm.environment.set(\"edit_order_1\", orderIDsToEdit[0] || \"\");",
													"pm.environment.set(\"edit_order_2\", orderIDsToEdit[1] || \"\");",
													"",
													"console.log(\"Stored order IDs for editing:\", orderIDsToEdit);",
													"",
													"pm.test(\"Verify stored order IDs exist in environment variables\", function () {",
													"    const order1 = pm.environment.get(\"edit_order_1\");",
													"    const order2 = pm.environment.get(\"edit_order_2\");",
													"    ",
													"    pm.expect(order1).to.not.be.undefined.and.to.not.equal(\"\");",
													"    pm.expect(order2).to.not.be.undefined.and.to.not.equal(\"\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/ENSEK/orders",
										"description": "Use to obtain details of previous orders."
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": "{{baseUrl}}/ENSEK/orders"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Confirm Orders made befoe the current date",
							"item": [
								{
									"name": "get orders before current date - INT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Get the current date in UTC format",
													"const currentDate = new Date().toISOString();",
													"",
													"// Parse response",
													"const responseData = pm.response.json();",
													"",
													"// Count orders before today",
													"let pastOrdersCount = 0;",
													"",
													"responseData.forEach(order => {",
													"    const orderDate = new Date(order.time).toISOString();",
													"",
													"    if (orderDate < currentDate) {",
													"        pastOrdersCount++;",
													"    }",
													"});",
													"",
													"// Store count for later verification",
													"pm.environment.set(\"pastOrdersCount\", pastOrdersCount);",
													"",
													"console.log(`Orders created before today: ${pastOrdersCount}`);",
													"",
													"// Test validation",
													"pm.test(\"Confirm orders before today\", function () {",
													"    pm.expect(pastOrdersCount).to.be.greaterThan(0, \"There should be past orders\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/ENSEK/orders",
										"description": "Use to obtain details of previous orders."
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": "{{baseUrl}}/ENSEK/orders"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Change Orders and verify",
							"item": [
								{
									"name": "put orders - INT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"pm.test(\"Response has a valid JSON content type\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"Response body is not empty\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.exist.and.to.not.be.empty;",
													"});",
													"",
													"",
													"pm.test(\"Verify that the response contains an error message\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('error').that.is.a('string');",
													"});",
													"",
													"",
													"pm.test(\"Check for specific error code or description in the response\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.have.property('errorCode');",
													"    pm.expect(responseData).to.have.property('errorDescription');",
													"});",
													"",
													"console.log(\"Stored order IDs for editing:\", pm.environment.get(\"edit_order_1\"),pm.environment.get(\"edit_order_2\"));",
													"",
													"pm.test(\"Verify that stored order IDs exist\", function () {",
													"    pm.expect(pm.environment.get(\"edit_order_1\")).to.not.be.undefined;",
													"    pm.expect(pm.environment.get(\"edit_order_2\")).to.not.be.undefined;",
													"});",
													"",
													"const editOrder1 = pm.environment.get(\"edit_order_1\") || \"\";",
													"const editOrder2 = pm.environment.get(\"edit_order_2\") || \"\";",
													"",
													"// Ensure IDs are valid before making requests",
													"pm.test(\"Order IDs for editing should not be empty\", function () {",
													"    pm.expect(editOrder1).to.not.equal(\"\");",
													"    pm.expect(editOrder2).to.not.equal(\"\");",
													"});",
													"",
													"// Stop execution if IDs are missing",
													"if (!editOrder1 || !editOrder2) {",
													"    console.error(\"Error: Order IDs are missing!\");",
													"}",
													"",
													"",
													"const updateRequests = [editOrder1, editOrder2].filter(orderId => orderId !== \"\").map(orderId => ({",
													"    url: `https://qacandidatetest.ensek.io/ENSEK/orders/${orderId}`,",
													"    method: \"PUT\",",
													"    header: {",
													"        \"Accept\": \"application/json\",",
													"        \"Content-Type\": \"application/json\"",
													"    },",
													"    body: JSON.stringify({",
													"        \"id\": orderId,",
													"        \"quantity\": 7, ",
													"        \"energy_id\": 3",
													"    })",
													"}));",
													"",
													"updateRequests.forEach(request => {",
													"    pm.sendRequest(request, function (err, res) {",
													"        pm.test(`Order ${request.url} should be successfully updated`, function () {",
													"            pm.expect(res.code).to.equal(200);",
													"        });",
													"",
													"        pm.test(\"Response should confirm update\", function () {",
													"            const responseData = res.json();",
													"            pm.expect(responseData.message).to.include(\"updated\");",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"\",\n  \"quantity\": 0,\n  \"energy_id\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/ENSEK/orders/:orderId?quantity=2&energy_id=2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"ENSEK",
												"orders",
												":orderId"
											],
											"query": [
												{
													"key": "quantity",
													"value": "2"
												},
												{
													"key": "energy_id",
													"value": "2"
												}
											],
											"variable": [
												{
													"key": "orderId",
													"value": "080d9823-e874-4b5b-99ff-2021f2a59b24",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"\",\n  \"quantity\": 0,\n  \"energy_id\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/ENSEK/orders/:orderId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"ENSEK",
														"orders",
														":orderId"
													],
													"variable": [
														{
															"key": "orderId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "get orders edited Orders - INT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.sendRequest({",
													"    url: \"https://qacandidatetest.ensek.io/ENSEK/orders\",",
													"    method: \"PUT\",",
													"    header: {",
													"        \"Accept\": \"application/json\",",
													"        \"Content-Type\": \"application/json\"",
													"    },",
													"    body: JSON.stringify({",
													"        \"quantity\": 7,",
													"        \"energy_id\": 3",
													"    })",
													"}, function (err, res) {",
													"    pm.test(\"Updating without ID should fail with 400 or 422\", function () {",
													"        pm.expect(res.code).to.be.oneOf([400, 422]);",
													"    });",
													"",
													"    pm.test(\"Response should state that ID is required\", function () {",
													"        const responseData = res.json();",
													"        pm.expect(responseData.message).to.include(\"ID is required\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/ENSEK/orders",
										"description": "Use to obtain details of previous orders."
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": "{{baseUrl}}/ENSEK/orders"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Delete orders and verify",
							"item": [
								{
									"name": "delete orders - INT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 500\", function () {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"});",
													"",
													"",
													"pm.test(\"Content-Type is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"",
													"pm.test(\"Message is present in the response\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData.message).to.exist;",
													"});",
													"",
													"",
													"pm.test(\"Message is a non-empty string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Response message is meaningful and provides useful information\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.message).to.exist.and.to.be.a('string', \"Message should be a string\");",
													"    pm.expect(responseData.message).to.not.be.empty;",
													"});",
													"",
													"const order1 = pm.environment.get(\"delete_order_1\");",
													"const order2 = pm.environment.get(\"delete_order_2\");",
													"",
													"const deleteRequests = [order1, order2].map(orderId => ({",
													"    url: `{{baseUrl}}/ENSEK/orders/${orderId}`,",
													"    method: \"DELETE\",",
													"    header: { \"Accept\": \"application/json\" }",
													"}));",
													"",
													"deleteRequests.forEach(request => {",
													"    pm.sendRequest(request, function (err, res) {",
													"        pm.test(`Order ${request.url} should be successfully deleted`, function () {",
													"            pm.expect(res.code).to.equal(500);",
													"        });",
													"",
													"        pm.test(\"Response should confirm deletion\", function () {",
													"            const responseData = res.json();",
													"            pm.expect(responseData.message).to.equal(\"Internal Server Error\");",
													"        });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/ENSEK/orders/:orderId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"ENSEK",
												"orders",
												":orderId"
											],
											"variable": [
												{
													"key": "orderId",
													"value": "<string>",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/ENSEK/orders/:orderId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"ENSEK",
														"orders",
														":orderId"
													],
													"variable": [
														{
															"key": "orderId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "get orders New Orders - INT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.sendRequest({",
													"    url: \"https://qacandidatetest.ensek.io/ENSEK/orders\",",
													"    method: \"GET\",",
													"    header: { \"Accept\": \"application/json\" }",
													"}, function (err, res) {",
													"    const updatedOrders = res.json();",
													"    const deletedOrder1 = pm.environment.get(\"delete_order_1\");",
													"    const deletedOrder2 = pm.environment.get(\"delete_order_2\");",
													"",
													"    pm.test(`Deleted orders should NOT exist anymore`, function () {",
													"        const remainingOrderIDs = updatedOrders.map(order => order.id);",
													"        pm.expect(remainingOrderIDs).to.not.include(deletedOrder1);",
													"        pm.expect(remainingOrderIDs).to.not.include(deletedOrder2);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": "{{baseUrl}}/ENSEK/orders",
										"description": "Use to obtain details of previous orders."
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"url": "{{baseUrl}}/ENSEK/orders"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": {
			"key": "Authorization",
			"value": "{{apiKey}}",
			"in": "header"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://qacandidatetest.ensek.io"
		},
		{
			"key": "AccessToken",
			"value": "---",
			"type": "string"
		}
	]
}